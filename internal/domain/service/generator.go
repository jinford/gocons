package service

import (
	"fmt"

	"github.com/dave/jennifer/jen"
	"github.com/jinford/gocons/internal/domain/entity"
	"golang.org/x/tools/imports"
)

type CodeGenerater interface {
	GenerateCode(pkgName string, structs []*entity.Struct) ([]byte, error)
}

type codeGenerater struct {
	appName   string
	isValues  bool
	allGetter bool
}

func NewCodeGenerator(appName string, isValues bool, allGetter bool) CodeGenerater {
	return &codeGenerater{
		appName:   appName,
		isValues:  isValues,
		allGetter: allGetter,
	}
}

func (g *codeGenerater) GenerateCode(pkgName string, structs []*entity.Struct) ([]byte, error) {
	f := jen.NewFile(pkgName)
	f.HeaderComment(fmt.Sprintf("Code generated by %s; DO NOT EDIT.", g.appName))

	for _, s := range structs {
		f.Add(jen.Id(s.GenerateConstructorStatement(g.isValues)).Line())
		for _, getter := range s.GenerateGettersStatement(g.isValues, g.allGetter) {
			f.Add(jen.Id(getter).Line())
		}

	}

	code := f.GoString()

	fmted, err := imports.Process("", []byte(code), nil)
	if err != nil {
		return nil, fmt.Errorf("failed to format generated code: %w", err)
	}

	return fmted, nil
}
